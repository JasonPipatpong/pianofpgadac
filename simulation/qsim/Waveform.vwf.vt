// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2020 01:24:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    combine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module combine_vlg_sample_tst(
	clk,
	reset,
	slide_switch,
	sampler_tx
);
input  clk;
input  reset;
input [6:0] slide_switch;
output sampler_tx;

reg sample;
time current_time;
always @(clk or reset or slide_switch)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module combine_vlg_check_tst (
	sclk,
	sd,
	ws,
	sampler_rx
);
input  sclk;
input  sd;
input  ws;
input sampler_rx;

reg  sclk_expected;
reg  sd_expected;
reg  ws_expected;

reg  sclk_prev;
reg  sd_prev;
reg  ws_prev;

reg  sclk_expected_prev;
reg  sd_expected_prev;
reg  ws_expected_prev;

reg  last_sclk_exp;
reg  last_sd_exp;
reg  last_ws_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	sclk_prev = sclk;
	sd_prev = sd;
	ws_prev = ws;
end

// update expected /o prevs

always @(trigger)
begin
	sclk_expected_prev = sclk_expected;
	sd_expected_prev = sd_expected;
	ws_expected_prev = ws_expected;
end



// expected sclk
initial
begin
	sclk_expected = 1'bX;
end 

// expected sd
initial
begin
	sd_expected = 1'bX;
end 

// expected ws
initial
begin
	ws_expected = 1'bX;
end 
// generate trigger
always @(sclk_expected or sclk or sd_expected or sd or ws_expected or ws)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected sclk = %b | expected sd = %b | expected ws = %b | ",sclk_expected_prev,sd_expected_prev,ws_expected_prev);
	$display("| real sclk = %b | real sd = %b | real ws = %b | ",sclk_prev,sd_prev,ws_prev);
`endif
	if (
		( sclk_expected_prev !== 1'bx ) && ( sclk_prev !== sclk_expected_prev )
		&& ((sclk_expected_prev !== last_sclk_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sclk :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sclk_expected_prev);
		$display ("     Real value = %b", sclk_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sclk_exp = sclk_expected_prev;
	end
	if (
		( sd_expected_prev !== 1'bx ) && ( sd_prev !== sd_expected_prev )
		&& ((sd_expected_prev !== last_sd_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sd :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sd_expected_prev);
		$display ("     Real value = %b", sd_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sd_exp = sd_expected_prev;
	end
	if (
		( ws_expected_prev !== 1'bx ) && ( ws_prev !== ws_expected_prev )
		&& ((ws_expected_prev !== last_ws_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ws :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ws_expected_prev);
		$display ("     Real value = %b", ws_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_ws_exp = ws_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module combine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg reset;
reg [6:0] slide_switch;
// wires                                               
wire sclk;
wire sd;
wire ws;

wire sampler;                             

// assign statements (if any)                          
combine i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.reset(reset),
	.sclk(sclk),
	.sd(sd),
	.slide_switch(slide_switch),
	.ws(ws)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1000 1'b1;
	#1000;
end 

// reset
initial
begin
	reset = 1'b1;
end 
// slide_switch[ 6 ]
initial
begin
	slide_switch[6] = 1'b0;
end 
// slide_switch[ 5 ]
initial
begin
	slide_switch[5] = 1'b0;
end 
// slide_switch[ 4 ]
initial
begin
	slide_switch[4] = 1'b0;
end 
// slide_switch[ 3 ]
initial
begin
	slide_switch[3] = 1'b0;
end 
// slide_switch[ 2 ]
initial
begin
	slide_switch[2] = 1'b0;
end 
// slide_switch[ 1 ]
initial
begin
	slide_switch[1] = 1'b0;
end 
// slide_switch[ 0 ]
initial
begin
	slide_switch[0] = 1'b0;
end 

combine_vlg_sample_tst tb_sample (
	.clk(clk),
	.reset(reset),
	.slide_switch(slide_switch),
	.sampler_tx(sampler)
);

combine_vlg_check_tst tb_out(
	.sclk(sclk),
	.sd(sd),
	.ws(ws),
	.sampler_rx(sampler)
);
endmodule

